version: 2.1

#orbs:
#  slack: circleci/slack@3.4.2

#commands:
#  slack-notify:  
#    steps:
#      - slack/status:
#          channel: cicd-pipeline
#          mentions: "ozayr,"
#          fail_only: true

  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          when: on_fail
          name: Destroy front end
          command: |
            aws s3 rm s3://udapeople-frontend-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "frontend-<< parameters.workflow_id >>"
      - run:
          when: on_fail
          name: Destroy back end
          command: |
            aws cloudformation delete-stack --stack-name "backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "prometheus-overwatch"
    

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations:revert
      - destroy_environment:
          workflow_id: << parameters.workflow_id >>
          
  

jobs:
# =========================================================================================================
# BUILD
  backend_build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - back-end-{{ checksum "backend/package.json" }}
  
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
          
      - save_cache:
          paths:
            - backend/node_modules 
          key: back-end-{{ checksum "backend/package.json" }}

  frontend_build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - front-end-{{ checksum "frontend/package.json" }}

      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
          
      - save_cache:
          paths:
            - frontend/node_modules
          key: front-end-{{ checksum "frontend/package.json" }}
  
# =======================================================================================================
# TEST
  backend_tests:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - back-end-{{ checksum "backend/package.json" }}
     
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd backend
            npm add --dev jest-junit
            npm run test --reporters=jest-junit
     
      - store_test_results:
          path: backend/test-results
      - store_artifacts:
          path: backend/test-results/junit/junit.xml
    
            
      - save_cache:
          paths:
            - backend/node_modules 
          key: back-end-{{ checksum "backend/package.json" }}

  frontend_tests:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - front-end-{{ checksum "frontend/package.json" }}

      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd frontend
            npm add --dev jest-junit
            npm run test --reporters=jest-junit
      
      - store_test_results:
          path: frontend/test-results
      - store_artifacts:
          path: frontend/test-results/junit/junit.xml
          
      - save_cache:
          paths:
            - frontend/node_modules  
          key: front-end-{{ checksum "frontend/package.json" }}

  #    - slack-notify
          
# =========================================================================================================
# ANALYZE
  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - back-end-{{ checksum "backend/package.json" }}
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit --audit-level=critical

      - save_cache:
          paths:
            - backend/node_modules  
          key: back-end-{{ checksum "backend/package.json" }}


  audit-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - front-end-{{ checksum "frontend/package.json" }}
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
   #        npm audit --audit-level=critical
      
      - save_cache:
          paths:
            - frontend/node_modules  
          key: front-end-{{ checksum "frontend/package.json" }}
# =================================================================================================
# INFRASTRUCTURE 


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create backend infrastructure 
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
            --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: create frontend infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
            --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: get public IP of EC2 instance created
          command: |
            echo "[server]" > inventory
            aws cloudformation describe-stacks \
            --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[?OutputKey==\`BackendURL\`].OutputValue" \
            --output text >> inventory
   

      - run:
          name: create Monitoring infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/prometheus_cfn.yml \
            --stack-name "prometheus-overwatch"
      - run:
          name: get public IP of overwatch
          command: |
            echo "[overwatch]" >> inventory
            aws cloudformation describe-stacks \
            --stack-name "prometheus-overwatch" \
            --query "Stacks[0].Outputs[?OutputKey==\`prometheusDNSName\`].OutputValue" \
            --output text >> inventory    

        
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ./
          paths:
            - ./inventory

   #   - slack-notify

  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [b4faec55-30f0-4bf0-bbb4-a722fe314562]
      - checkout
      - restore_cache:
          keys: 
            - back-end-{{ checksum "backend/package.json" }}

      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run: mkdir -p  .circleci/ansible/roles/configure-server/files/backend
      - run:
          name: Make .env file
          command: |
            cd backend
            echo "ENVIRONMENT=production" > env
            echo "NODE_ENV=production" >> env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> env

      - run:
          name: Install dependencies and run build to generate dist folder to copy into remote server 
          command: | 
            pip install awscli && apk add --update ansible 
            cp -rv backend/*  .circleci/ansible/roles/configure-server/files/backend

      - run: ls .circleci/ansible/roles/configure-server/files/backend
      - run: apk update && apk add --upgrade rsync openssh 
      - run: 
          name: Configure server using ansible playbook
          command: ansible-playbook -i inventory .circleci/ansible/configure_backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: 
            - back-end-{{ checksum "backend/package.json" }}
      - run:
          name: Install dependencies
          command: |
            pip install awscli && apk add --update nodejs npm
      - run: |
          cd backend
          npm i 
          npm run build 
          npm run migrations
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    

# =======================================================================================================
# DEPLOY
  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [b4faec55-30f0-4bf0-bbb4-a722fe314562]
      - checkout
      - restore_cache:
          keys: 
            - back-end-{{ checksum "backend/package.json" }}

      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: | 
            pip install awscli && apk add --update ansible nodejs npm 
      - run: 
          name: deploy server using ansible playbook
          command: ansible-playbook -i inventory .circleci/ansible/deploy_backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False 

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
     

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [b4faec55-30f0-4bf0-bbb4-a722fe314562]
      - checkout
      - restore_cache:
          keys: 
            - front-end-{{ checksum "frontend/package.json" }}
      - run:
          name: Install dependencies
          command: |
            pip install awscli && \
            apk add --update nodejs npm 
      - run:
          name: Build frontend
          command: |
            export API_URL=$(aws cloudformation describe-stacks \
            --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[?OutputKey==\`BackendURL\`].OutputValue" \
            --output text):3030
            echo $API_URL
            cd frontend
            npm i
            npm run build
            aws s3 sync "dist/" s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
     
# ====================================================================================================
# pre-promote

  smoke-test:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - run: pip install awscli && apk add --update nodejs npm curl
        - run:
            name: Test Frontend
            command: |
              URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
              if curl -s ${URL} | grep "Welcome"
              then
              return 0
              else
              return 1
              fi
        - run:
            name: Test Backend
            command: |
              BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey==\`BackendURL\`].OutputValue" \
              --output text)
              echo ${BACKEND_IP}
              curl "http://${BACKEND_IP}:3030/api/status" 
              
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        

# ================================================================================================================
# PROMOTION 

  promote-to-production:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli && apk add --update nodejs npm curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OLD_ID
            if test -z "$OLD_ID"
            then
              echo "congrats!!! first deploy , or we lost the prev deploy ID!!!"
            else
              aws cloudformation delete-stack --stack-name backend-${OLD_ID}
              aws s3 rm s3://udapeople-frontend-${OLD_ID} --recursive
              aws cloudformation delete-stack --stack-name frontend-${OLD_ID}
            fi
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-distro \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        


# ========================================================================================================
# MONITORING
  configure-overwatch:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [b4faec55-30f0-4bf0-bbb4-a722fe314562]
      - checkout
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies and run build to generate dist folder to copy into remote server 
          command: | 
            pip install awscli && apk add --update ansible 
      - run: |
          sed -i "s|PROM_SECRET_KEY|$PROM_SECRET_ACCESS|g" .circleci/ansible/roles/setup_prometheus/files/prometheus.yml
          sed -i "s|SLACK_WEBHOOK|$SLACK_WEBHOOK|g" .circleci/ansible/roles/setup_alertsmanager/files/alertmanager.yml
      - run: 
          name: Configure overwatch server using ansible playbook
          command: ansible-playbook -i inventory .circleci/ansible/setup_prometheus_monitor.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
    


  setup-node-exporter:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [b4faec55-30f0-4bf0-bbb4-a722fe314562]
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run: |
          apk add --update ansible && \
          pip install awscli && \
          apk add --update nodejs npm curl
      - run:
          name: Setup prometheus monitoring
          command: |
            ansible-playbook -i inventory .circleci/ansible/setup_prometheus_node_exporter.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False 
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
    
      - backend_build
      - frontend_build
      
    #  - backend_tests:
    #      requires: 
    #        - backend_build
    #  - frontend_tests:
    #      requires: 
    #        - frontend_build

    #  - audit-backend:
    #      requires:
    #        - backend_tests
    # - audit-frontend:
    #      requires:
    #        - frontend_tests

      - deploy-infrastructure:
         # requires:
         #   - audit-backend
         #   - audit-frontend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure

      - run-migrations:
          requires:
            - configure-infrastructure

      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - deploy-backend
          
      #- smoke-test:
      #    requires: 
      #      - deploy-frontend
      
      #- configure-overwatch:
      #    requires:
      #      - smoke-test
      #- setup-node-exporter:
      #   requires:
      #      - smoke-test

      #- promote-to-production:
      #    requires:
      #      - smoke-test
