version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-stack"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-stack"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations.txt;
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install --save
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd ~/project/backend
              npm install --save
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
              cd ~/project/frontend
              npm install
              npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
              cd ~/project/backend
              npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
              cd ~/project/frontend
              npm install
              npm audit fix 
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
              cd ~/project/backend
              npm audit fix 
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
               --stack-name "udapeople-backend-stack" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
               --stack-name "udapeople-frontend-stack" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/
            echo -e "[web]\n" > inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/project/.circleci/ansible/inventory.txt
            cat inventory.txt
            pwd
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/  
          paths:
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run build
            touch migrations.txt
            npm run migrations >> migrations.txt
            MIGRATIONS=$(cat migrations.txt)
            if grep -q "has been executed successfully" migrations.txt; then
              curl -H "Content-Type: text/plain" -H "token: b4faec55-30f0-4bf0-bbb4-a722fe314562" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            touch .env
            echo ENVIRONMENT=production >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domaster/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            mkdir ~/project/.circleci/ansible/roles/deploy/files
            zip -r backend.zip ~/project/backend/
            cp -r backend.zip ~/project/.circleci/ansible/roles/deploy/files/
      - persist_to_workspace:
          root: ~/project/backend/
          paths:
            - migrations.txt
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/  
          paths:
            - roles/deploy/files

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            curl -H "Content-Type: text/plain" -H "token: b4faec55-30f0-4bf0-bbb4-a722fe314562" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"
      - attach_workspace:
          at: ./.circleci/ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ls ~/project/.circleci/ansible/roles/deploy/files/
            ls ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            echo "deploy complete"
          no_output_timeout: 30m
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo ""
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: b4faec55-30f0-4bf0-bbb4-a722fe314562" --request GET https://api.memstash.io/values/BACKEND_IP)
            
      - run:
          name: Backend smoke test.
          command: |
            echo "${BACKEND_IP}"
            if curl -sL --fail "http://${BACKEND_IP}:3000/api/status"; then
              echo "Success"
            else
              echo "Fail"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-us-west-2.amazonaws.com/index.html"
            if curl -s ${URL} | grep "Welcome";
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
               --stack-name "udapeople-cloudfront" \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]];
            then
              aws s3 rm s3://udapeople-kk1j437dhjnmmz19339 --recursive
            fi

  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only:
                - master
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only:
                - master
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only:
                - master
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only:
                - master
