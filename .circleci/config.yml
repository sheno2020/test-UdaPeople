version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install 
            npm run build       
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install 
            npm run build       
            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run:
          name: sheno frontend test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: sheno backend test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run:
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            #--tags project=your-tag \
            # --stack-name "your back-end stack name with workflow id" \
            # --parameter-overrides ID="your workflow id"  
            # exit 1
            # aws cloudformation deploy \
            #  --template-file .circleci/files/estcfn.yml \
            #  --stack-name my-stack-circleci
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-stack-$CIRCLE_WORKFLOW_ID \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            #aws cloudformation deploy \
              #--template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name frontend-stack-$CIRCLE_WORKFLOW_ID \
                --parameter-overrides ID=$CIRCLE_WORKFLOW_ID

      - run:
          name: Add back-end ip to ansible inventory
          command: |

            echo "[web]" > inventory
            aws cloudformation describe-stacks \
            --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID}" \
            --query "Stacks[0].Outputs[?OutputKey==\`BackendURL\`].OutputValue" \
            --output text >> inventory 
            # Your code here
            # exit 1
      - run: yum install -y tar gzip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1]
      - checkout
      
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run: mkdir -p  .circleci/ansible/roles/configure-server/files/backend
     
        #- restore_cache:
        #    keys:
        #      - back-end-{{ checksum "backend/package.json" }}

      - run:
            name: Make .env file
            command: |
              cd backend
              echo "ENVIRONMENT=production" > env
              echo "NODE_ENV=production" >> env
              echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> env
              echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> env
              echo "TYPEORM_HOST=$TYPEORM_HOST" >> env
              echo "TYPEORM_PORT=$TYPEORM_PORT" >> env
              echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> env
              echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> env
              echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> env

        - run:
            name: Install dependencies
            command: |
              # Your code here
              # exit 1

              pip install awscli && apk add --update ansible 
              cp -rv backend/*  .circleci/ansible/roles/configure-server/files/backend
        - run: ls .circleci/ansible/roles/configure-server/files/backend
        - run: apk update && apk add --upgrade rsync openssh

        - run:
            name: Configure server
        #    # Your code here
        # exit 1
            command: |
                ansible-playbook -i inventory .circleci/ansible/configure-server.yml
            environment:
              ANSIBLE_HOST_KEY_CHECKING: False
        - destroy_environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID}

  # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

cleanup:
  docker:
    # Docker image here
    - image: circleci/node:13.8.0
  steps:
    # Checkout code from git
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          export OldWorkflowID="the id here"
          export STACKS=[] #put the list of stacks here
    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
          fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      #- cleanup:
      #   requires: [cloudfront-update]
